//компонент который будет генерировать QR code

//Для начала найдем бибилиотеку которая будет генерировать QR code
//чтобы проверить установилась ли эта библиотека переходим в package.json

//из react импортируем хранилище useState:
import { useState } from 'react';
//у useState хриналища есть два элемента : значение которое мы передали и второй - ф-ция, котороая обновляет хранлилще и перерисовывает наш компонент

//Теперь в QrCodeGenerator.jsx импортируем фрагмент с сайта библиотеки qr кода
import { QRCodeSVG } from 'qrcode.react';//то есть из библиотеки импортирем какой-то компонент который генерирует qr код 

//импортируем наш ключ GENERATE_DATA из constants.js:
import { GENERATE_DATA } from '../../constants.js'; 


//подключаем css файл:
import s from './qrCodeGenerator.module.css';

//нам надо передвать не статичный текст, а тот который мы напишем в поле ввода - то есть нам нужно поле и кнопка и когда мы нажмем на кнопк то этот текст передается и генериреутся соответсвующий qr код
export const QrCodeGenerator = () => {
    const [value, setValue] = useState('');
    // const array = useState('hello');
    // const value = array[0];
    // const setValue = array[1];

    // console.log(array[0]); //value
    // console.log(array[1]); //fn 

    //сделаем теперь так чтобы qr код появлялся ток тогда когда мы нажимаем на кнопку - для этого нам нужно еще одно хранилище
    const [result, setResult] = useState('');

    const onClickHandler = () => {
      const prevData = JSON.parse(localStorage.getItem(GENERATE_DATA) || "[]");
      //JSON.parse чтобы конвертировать в массив

      //положим в хранилище значение:
      localStorage.setItem(
        GENERATE_DATA,
        JSON.stringify([...prevData, value])
      );

      //помимо того что у нас генерируется qr код, значение в localStorage записывается в массив


      setResult(value);
      setValue(""); //таким образом можно очистить поле ввода когда надимаем на сгенерировать QR
    };

    //это ф-ция которая будет вызываться кажд раз когда в input меняются какие-то значения - меняться они будт тогда когда мы будем нажимать любую кнопку на клаве
    const onChangeHandler = (event) => { 
        setValue(event.target.value);
        //event.target.value - значит достать значение из поля ввода
        setResult('');
        //как только событие onChangeHandler произошло мы снова скрываем qr код: то есть пишем в инпут надимаем генерировать и код появляется, начинаем снова писать и код исчезаты
    };


    return (// <QRCodeSVG то есть вызываем этот компонент это тоже взято с сайта библиотеки qr кода
        //в value передаем значение какое нам надо 
        //отрисовка по условю: <QRCodeSVG value={value} /> нужно отрисовывать не всегла, а только когда переменная isShowQRCode будет в знчении true
    <div className={s.container}>
        <input 
        type="text" 
        value={value} 
        placeholder='Введите текст...'
        onChange={onChangeHandler} 
        className={s.input}
        />
        <button type='button' className={s.button} onClick={onClickHandler}>
            Сгенерировать QR
        </button>

        {result !== '' && (
            <div className={s.qrWrapper}>
                <QRCodeSVG value={result} size ={200}/>
                </div>
                )} 
        {/* или так *s/}
        {/* {isShowQRCode ? <QRCodeSVG value={value} /> : null} */}
        {/* или так */}
        {/*  {isShowQRCode === true ? <QRCodeSVG value={value} /> : null}*/}
    </div> 
    );
};
// <input type="text" /> - сделали поле ввода
//нам надо отслеживать события когда мы нажимаем на кнопку onCLick={} - это спец синтаксис когда мы хотим передать какое-то динамическое значение - то есть ставим фигурные скобки, а не кавычки как для обычного текста

//<button type='button' onClick={onClickHandler}> - то есть на кнопку повеслили событие клика (отслеживаем любое нажатие на кнопку) и как только нажатие совершено мы будем вызывать ф-цию onClickHandler

//когда нажимаем на кнопку поле ввода очищается и в консоли будет написано то, что мы ввели в поле ввода: в реакте есть такое понятие как контроллируемые и неконтроллируемы компоненты - они по умолчанию все неконтроллируемые, т е мы не можем знать где он хранит свои значения
//Можем сделать поведение компонента контроллируемым - в input передаем атрибут value но теперь в поле ввода ничего нельяз написать и реакт говорит в консоли что этот компонент явл контроллируемым - реакт ттеперь не отвечате за хранилище внутри input. Теперь это наша задача и мы должны где-то хранить эти значения и обновлять - передаем в наше поле еще один атрибут onChange={}

//Чтобы сделать компонент контроллируемым есть схема: создаем какую-то переменную  в эту переменную кладжем значение из event.target.value (test = event.target.value;), передаем её в наш input в value={}

//Но реакт не реагирует когда мы меняем переменные, нам нужно сделать перерисовку компонента: сделаем это с помощью хранилища: это хранилище useState нам предоставляет react и будем в нем хранить переменную test. у useState хриналища есть два элемента : значение которое мы передали и второй - ф-ция, котороая обновляет хранлилще и перерисовывает наш компонент

//Теперь каждый раз когда мы в поле ввода что-то вписали мы перерисовываем компонент потому что вызываем спец ф-цию setValue которую нам предоставляеь реакт (у useState  хриналища есть два элемента : значение которое мы передали и второй - ф-ция, котороая обновляет хранлилще и перерисовывает наш компонент). эта ф перерис компонент, обновляет значение

//функции у хранилищ называть через set: setValue, setIshowQRCodetValue и тд

